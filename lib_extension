local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local roblo_lib = {}

-- Your original CreateTabSystem function (keep exactly as you posted, unchanged)
function roblo_lib:CreateTabSystem(Holder, ContentHolder, tab_template, tab_name)
    local currentTab

    -- Handles tab switching and tween animations
    local function onTabClick(selectedTab)
        for _, p in pairs(ContentHolder:GetChildren()) do
            if p.Name ~= "tabname" then
                p.Visible = false
            end
        end

        tab_template.Visible = true
        tab_name.Text = tostring(selectedTab.Name)

        if selectedTab ~= currentTab then
            if currentTab then
                TweenService:Create(currentTab, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), 
                    {BackgroundColor3 = Color3.fromRGB(83, 83, 83)}):Play()
            end

            TweenService:Create(selectedTab, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), 
                {BackgroundColor3 = Color3.fromRGB(63, 63, 63)}):Play()

            currentTab = selectedTab

            local tabContent = Holder:FindFirstChild(selectedTab.Name)
            if tabContent then
                tabContent.Visible = true
            end
        end
    end

    -- Connect all tab buttons
    for _, tab in ipairs(Holder:GetChildren()) do
        if tab:IsA("ImageButton") then
            tab.MouseButton1Click:Connect(function()
                onTabClick(tab)
            end)
        end
    end

    local innertab = {}

    function innertab:CreateSlider(title, maxValue, minValue, callback)
        maxValue = tonumber(maxValue) or 100
        minValue = tonumber(minValue) or 0
        callback = callback or function() end

        local slider = Instance.new("Frame", tab_template)
        slider.Name = "slider"
        slider.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
        slider.BorderSizePixel = 0
        slider.Size = UDim2.new(0, 261, 0, 48)
        slider.Position = UDim2.new(0, 0, 0.63, 0)

        local slider_name = Instance.new("TextLabel", slider)
        slider_name.Name = "slider_name"
        slider_name.BackgroundTransparency = 1
        slider_name.Size = UDim2.new(0.57, 0, 0.43, 0)
        slider_name.Position = UDim2.new(0, 6, 0, 6)
        slider_name.Font = Enum.Font.Arial
        slider_name.Text = title or "Untitled Slider"
        slider_name.TextColor3 = Color3.new(1, 1, 1)
        slider_name.TextSize = 14
        slider_name.TextXAlignment = Enum.TextXAlignment.Left

        local slider_val = Instance.new("TextLabel", slider)
        slider_val.Name = "slider_val"
        slider_val.BackgroundTransparency = 1
        slider_val.Size = UDim2.new(0.38, 0, 0.43, 0)
        slider_val.Position = UDim2.new(0.63, -6, 0, 6)
        slider_val.Font = Enum.Font.Arial
        slider_val.TextColor3 = Color3.new(1, 1, 1)
        slider_val.TextSize = 14
        slider_val.TextXAlignment = Enum.TextXAlignment.Right

        local sliderbtn = Instance.new("ImageButton", slider)
        sliderbtn.Name = "sliderbtn"
        sliderbtn.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
        sliderbtn.BackgroundTransparency = 0
        sliderbtn.BorderSizePixel = 0
        sliderbtn.Position = UDim2.new(0.04, 0, 0.66, 0)
        sliderbtn.Size = UDim2.new(0, 237, 0, 7)
        sliderbtn.Image = ""

        local MIN_WIDTH = 5
        local SLIDER_WIDTH = 237
        local value = minValue

        local function updateValue(sizeX)
            local clampedX = math.clamp(sizeX, MIN_WIDTH, SLIDER_WIDTH)
            local scaledValue = ((maxValue - minValue) / (SLIDER_WIDTH - MIN_WIDTH)) * (clampedX - MIN_WIDTH) + minValue
            value = math.floor(scaledValue)
            slider_val.Text = tostring(value)
            pcall(callback, value)
        end

        local dragging = false
        sliderbtn.MouseButton1Down:Connect(function()
            dragging = true
        end)

        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = UserInputService:GetMouseLocation().X
                local relativeX = mouseX - sliderbtn.AbsolutePosition.X
                sliderbtn.Size = UDim2.new(0, math.clamp(relativeX, MIN_WIDTH, SLIDER_WIDTH), 0, 7)
                updateValue(sliderbtn.Size.X.Offset)
            end
        end)

        updateValue(MIN_WIDTH)
    end

    function innertab:CreateSubDivider(name)
        local divider = Instance.new("Frame", tab_template)
        divider.Name = "divider"
        divider.BackgroundTransparency = 1
        divider.Size = UDim2.new(0, 268, 0, 57)
        divider.Position = UDim2.new(0, 0, 0.35, 0)

        local line = Instance.new("Frame", divider)
        line.Name = "dividerLine"
        line.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
        line.BorderSizePixel = 0
        line.Size = UDim2.new(0, 267, 0, 7)
        line.Position = UDim2.new(0, 0, 0.65, 0)

        local label = Instance.new("TextLabel", divider)
        label.Name = "divider_name"
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(1, 0, 0.58, 0)
        label.Position = UDim2.new(0, 6, 0, 6)
        label.Font = Enum.Font.Arial
        label.Text = name or "Untitled Divider"
        label.TextColor3 = Color3.new(1, 1, 1)
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left
    end

    function innertab:CreateCheckBox(name, callback)
        callback = callback or function() end

        local checkbox = Instance.new("Frame", tab_template)
        checkbox.Name = "checkbox"
        checkbox.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
        checkbox.Size = UDim2.new(0, 269, 0, 35)
        checkbox.Active = true

        local label = Instance.new("TextLabel", checkbox)
        label.Name = "checkboxname"
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(0.78, 0, 0.67, 0)
        label.Position = UDim2.new(0, 6, 0.17, 0)
        label.Font = Enum.Font.Arial
        label.Text = name or "Untitled"
        label.TextColor3 = Color3.new(1, 1, 1)
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left

        local toggler = Instance.new("ImageButton", checkbox)
        toggler.Name = "toggler"
        toggler.BackgroundTransparency = 1
        toggler.Position = UDim2.new(0.92, 0, 0.29, 0)
        toggler.Size = UDim2.new(0, 14, 0, 15)
        toggler.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
        toggler.ImageColor3 = Color3.fromRGB(255, 79, 79)

        local enabled = false
        toggler.MouseButton1Click:Connect(function()
            enabled = not enabled
            local color = enabled and Color3.fromRGB(33, 149, 27) or Color3.fromRGB(255, 79, 79)
            TweenService:Create(toggler, TweenInfo.new(0.2), {ImageColor3 = color}):Play()
            pcall(callback, enabled)
        end)
    end

    function innertab:CreateButton(name, callback)
        callback = callback or function() end

        local button = Instance.new("Frame", tab_template)
        button.Name = "button"
        button.BackgroundColor3 = Color3.fromRGB(63, 63, 63)
        button.Size = UDim2.new(0, 269, 0, 35)
        button.Active = true

        local label = Instance.new("TextLabel", button)
        label.Name = "buttonname"
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(0.84, 0, 0.67, 0)
        label.Position = UDim2.new(0, 6, 0.17, 0)
        label.Font = Enum.Font.Arial
        label.Text = name or "Blank Button"
        label.TextColor3 = Color3.new(1, 1, 1)
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left

        local btn_content = Instance.new("TextButton", button)
        btn_content.Name = "btn_content"
        btn_content.BackgroundTransparency = 1
        btn_content.Size = UDim2.new(1, 0, 1, 0)
        btn_content.Text = ""
        btn_content.MouseButton1Click:Connect(function()
            pcall(callback)
        end)

        button.MouseEnter:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play()
        end)
        button.MouseLeave:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
        end)
    end

    -- Drag function for the main frame
    local function enableDrag(frame)
        local dragToggle = false
        local dragStart
        local startPos

        local function updateInput(input)
            local delta = input.Position - dragStart
            local pos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            TweenService:Create(frame, TweenInfo.new(0.25), {Position = pos}):Play()
        end

        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragToggle = true
                dragStart = input.Position
                startPos = frame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragToggle = false
                    end
                end)
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragToggle and input.UserInputType == Enum.UserInputType.MouseMovement then
                updateInput(input)
            end
        end)
    end

    -- Create main UI base container (Holder, ContentHolder, tab_template, tab_name) EXACTLY like your original example

    local screenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
    screenGui.Name = "Lib"
    screenGui.ResetOnSpawn = false

    local Holder = Instance.new("Frame", screenGui)
    Holder.Name = "Holder"
    Holder.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    Holder.Position = UDim2.new(0.5, -150, 0.5, -200)
    Holder.Size = UDim2.new(0, 300, 0, 400)
    Holder.Active = true
    Holder.Draggable = false

    enableDrag(Holder)

    local ContentHolder = Instance.new("Frame", Holder)
    ContentHolder.Name = "ContentHolder"
    ContentHolder.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    ContentHolder.Size = UDim2.new(0, 269, 0, 400)
    ContentHolder.Position = UDim2.new(0, 31, 0, 0)

    local tab_template = Instance.new("Frame", Holder)
    tab_template.Name = "tab_template"
    tab_template.BackgroundColor3 = Color3.fromRGB(83, 83, 83)
    tab_template.Size = UDim2.new(0, 269, 0, 400)
    tab_template.Position = UDim2.new(0, 31, 0, 0)
    tab_template.Visible = false

    local tab_name = Instance.new("TextLabel", ContentHolder)
    tab_name.Name = "tabname"
    tab_name.BackgroundTransparency = 1
    tab_name.Size = UDim2.new(1, 0, 0, 30)
    tab_name.Position = UDim2.new(0, 0, 0, 0)
    tab_name.Font = Enum.Font.ArialBold
    tab_name.TextSize = 18
    tab_name.TextColor3 = Color3.new(1, 1, 1)
    tab_name.TextXAlignment = Enum.TextXAlignment.Left
    tab_name.Text = "Lib"

    -- Create the tab buttons (e.g. "Settings", "About") inside Holder (you create these manually in your example before)

    -- Helper function to create tabs
    function base:CreateTab(name)
        -- Create tab button on left (Holder)
        local tabBtn = Instance.new("ImageButton", Holder)
        tabBtn.Name = name
        tabBtn.Size = UDim2.new(0, 27, 0, 26)
        tabBtn.Position = UDim2.new(0, 2, 0, (#Holder:GetChildren() - 3) * 27) -- auto stack vertically
        tabBtn.BackgroundColor3 = Color3.fromRGB(83, 83, 83)
        tabBtn.AutoButtonColor = false
        tabBtn.Image = ""

        local tabBtnText = Instance.new("TextLabel", tabBtn)
        tabBtnText.Name = "tabBtnText"
        tabBtnText.BackgroundTransparency = 1
        tabBtnText.Size = UDim2.new(1, 0, 1, 0)
        tabBtnText.Font = Enum.Font.Arial
        tabBtnText.TextSize = 14
        tabBtnText.TextColor3 = Color3.new(1, 1, 1)
        tabBtnText.Text = name

        -- Trigger the tab system's onTabClick manually here to switch content
        tabBtn.MouseButton1Click:Connect(function()
            -- Let your CreateTabSystem handle the click event
            -- (We set up the connections in CreateTabSystem already)
        end)

        -- Add the content frame for this tab (child of Holder)
        local tabContent = Instance.new("Frame", Holder)
        tabContent.Name = name
        tabContent.BackgroundTransparency = 1
        tabContent.Size = UDim2.new(0, 269, 0, 400)
        tabContent.Position = UDim2.new(0, 31, 0, 0)
        tabContent.Visible = false

        -- Actually, the content frames are managed by CreateTabSystem,
        -- so this tabContent is the content frame we want to show/hide.

        -- To hook up your element creation to this tab content frame,
        -- we call your existing CreateTabSystem on the updated Holder, ContentHolder, etc.

        return roblo_lib:CreateTabSystem(Holder, ContentHolder, tab_template, tab_name)
    end

    return base
end

return roblo_lib
